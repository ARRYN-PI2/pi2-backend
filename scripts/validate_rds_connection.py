#!/usr/bin/env python
"""
Script de validaci√≥n de conexi√≥n a AWS RDS PostgreSQL
Uso: python scripts/validate_rds_connection.py
"""

import os
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BASE_DIR))

try:
    import psycopg2
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå Error: Falta instalar dependencias: {e}")
    print("Ejecuta: pip install -r requirements.txt")
    sys.exit(1)

# Cargar variables de entorno
env_file = BASE_DIR / '.env.prod'
if not env_file.exists():
    env_file = BASE_DIR / '.env.dev'
    
if env_file.exists():
    load_dotenv(env_file)
    print(f"‚úÖ Cargando configuraci√≥n desde: {env_file}")
else:
    print("‚ö†Ô∏è  No se encontr√≥ archivo .env, usando variables de entorno del sistema")

# Obtener credenciales
DB_CONFIG = {
    'host': os.getenv('DATABASE_HOST', 'localhost'),
    'port': int(os.getenv('DATABASE_PORT', 5432)),
    'database': os.getenv('DATABASE_NAME', 'postgres'),
    'user': os.getenv('DATABASE_USER', 'postgres'),
    'password': os.getenv('DATABASE_PASSWORD', ''),
}

def validate_config():
    """Validar que todas las variables est√©n configuradas"""
    print("\n" + "="*60)
    print("üìã VALIDACI√ìN DE CONFIGURACI√ìN")
    print("="*60)
    
    required_vars = ['DATABASE_HOST', 'DATABASE_NAME', 'DATABASE_USER', 'DATABASE_PASSWORD']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"‚ùå {var}: NO CONFIGURADO")
        else:
            # Ocultar password
            display_value = '***' if 'PASSWORD' in var else value
            print(f"‚úÖ {var}: {display_value}")
    
    if missing_vars:
        print(f"\n‚ùå Variables faltantes: {', '.join(missing_vars)}")
        return False
    
    return True

def test_connection():
    """Probar conexi√≥n a PostgreSQL"""
    print("\n" + "="*60)
    print("üîå PRUEBA DE CONEXI√ìN A RDS")
    print("="*60)
    
    print(f"\nIntentando conectar a:")
    print(f"  Host: {DB_CONFIG['host']}")
    print(f"  Port: {DB_CONFIG['port']}")
    print(f"  Database: {DB_CONFIG['database']}")
    print(f"  User: {DB_CONFIG['user']}")
    
    try:
        print("\n‚è≥ Conectando... (timeout: 10 segundos)")
        conn = psycopg2.connect(
            **DB_CONFIG,
            connect_timeout=10
        )
        
        print("‚úÖ Conexi√≥n exitosa!")
        
        # Obtener versi√≥n de PostgreSQL
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"\nüìä Versi√≥n PostgreSQL:")
        print(f"  {version.split(',')[0]}")
        
        # Verificar si hay tablas
        cursor.execute("""
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        table_count = cursor.fetchone()[0]
        print(f"\nüì¶ Tablas en la base de datos: {table_count}")
        
        if table_count > 0:
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
                LIMIT 10
            """)
            tables = cursor.fetchall()
            print("\nüìã Tablas encontradas:")
            for table in tables:
                print(f"  - {table[0]}")
        else:
            print("‚ö†Ô∏è  No hay tablas creadas. Ejecuta: python manage.py migrate")
        
        # Verificar migraciones de Django
        try:
            cursor.execute("SELECT COUNT(*) FROM django_migrations")
            migration_count = cursor.fetchone()[0]
            print(f"\nüîÑ Migraciones aplicadas: {migration_count}")
        except psycopg2.errors.UndefinedTable:
            print("\n‚ö†Ô∏è  Tabla django_migrations no existe. Ejecuta: python manage.py migrate")
        
        cursor.close()
        conn.close()
        
        return True
        
    except psycopg2.OperationalError as e:
        print(f"\n‚ùå Error de conexi√≥n:")
        print(f"  {str(e)}")
        print("\nüîß Posibles soluciones:")
        print("  1. Verificar que el Security Group permita conexiones en puerto 5432")
        print("  2. Verificar que el endpoint sea correcto")
        print("  3. Verificar que las credenciales sean correctas")
        print("  4. Verificar que RDS tenga 'Public accessibility' habilitado (para testing)")
        return False
        
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        return False

def check_django_settings():
    """Verificar configuraci√≥n de Django"""
    print("\n" + "="*60)
    print("‚öôÔ∏è  VALIDACI√ìN DE DJANGO SETTINGS")
    print("="*60)
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Arryn_Back.infrastructure.config.settings')
        import django
        django.setup()
        
        from django.conf import settings
        
        # Verificar configuraci√≥n de base de datos
        db_config = settings.DATABASES['default']
        print(f"\n‚úÖ Django settings cargados correctamente")
        print(f"  Engine: {db_config['ENGINE']}")
        print(f"  Name: {db_config['NAME']}")
        print(f"  Host: {db_config['HOST']}")
        print(f"  Port: {db_config['PORT']}")
        
        # Verificar SECRET_KEY
        if settings.SECRET_KEY:
            print(f"\n‚úÖ SECRET_KEY configurado")
        else:
            print(f"\n‚ùå SECRET_KEY no configurado")
        
        # Verificar DEBUG
        print(f"\nüìù DEBUG mode: {settings.DEBUG}")
        if not settings.DEBUG:
            print("  ‚úÖ Producci√≥n mode activado")
        else:
            print("  ‚ö†Ô∏è  Development mode (cambiar a False en producci√≥n)")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error al cargar Django settings: {str(e)}")
        return False

def main():
    """Ejecutar todas las validaciones"""
    print("\n" + "="*60)
    print("üöÄ VALIDADOR DE CONEXI√ìN AWS RDS POSTGRESQL")
    print("="*60)
    
    results = {
        'config': validate_config(),
        'connection': False,
        'django': False
    }
    
    if results['config']:
        results['connection'] = test_connection()
        results['django'] = check_django_settings()
    
    # Resumen final
    print("\n" + "="*60)
    print("üìä RESUMEN DE VALIDACI√ìN")
    print("="*60)
    
    status_icon = lambda x: "‚úÖ" if x else "‚ùå"
    
    print(f"\n{status_icon(results['config'])} Configuraci√≥n de variables de entorno")
    print(f"{status_icon(results['connection'])} Conexi√≥n a PostgreSQL RDS")
    print(f"{status_icon(results['django'])} Configuraci√≥n de Django")
    
    all_passed = all(results.values())
    
    if all_passed:
        print("\n" + "="*60)
        print("üéâ ¬°TODAS LAS VALIDACIONES PASARON!")
        print("="*60)
        print("\n‚úÖ El sistema est√° listo para ejecutar migraciones:")
        print("   python manage.py migrate")
        print("\n‚úÖ Y crear el superusuario:")
        print("   python manage.py createsuperuser")
        return 0
    else:
        print("\n" + "="*60)
        print("‚ö†Ô∏è  ALGUNAS VALIDACIONES FALLARON")
        print("="*60)
        print("\nüîß Revisa los errores anteriores y corr√≠gelos antes de continuar.")
        print("üìñ Consulta: AWS_RDS_DEPLOYMENT_GUIDE.md")
        return 1

if __name__ == '__main__':
    sys.exit(main())
