"""
Django settings for ArrynBack project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import ssl
from pathlib import Path
from dotenv import load_dotenv
from pymongo import MongoClient

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables (only in development)
env_path = BASE_DIR.parent.parent / '.env.dev'
# Only load .env file if DEBUG environment variable is not explicitly set
if os.getenv('DEBUG') is None:
    load_dotenv(env_path)

# MongoDB Configuration from environment
mongo_port = os.getenv("MONGO_PORT", "27017").strip()
MONGO_DB = {
    "NAME": os.getenv("MONGO_DB_NAME", "arryn_products_db"),
    "HOST": os.getenv("MONGO_HOST", "localhost"),
    "PORT": int(mongo_port if mongo_port else "27017"),
}

try:
    # Use MongoDB Atlas URL if MONGO_HOST is empty, otherwise use local config
    mongo_host = os.getenv("MONGO_HOST", "localhost")
    mongodb_url = os.getenv("MONGODB_URL")
    
    if not mongo_host or mongo_host.strip() == "":
        # Using MongoDB Atlas
        if mongodb_url:
            mongo_client = MongoClient(
                mongodb_url,
                serverSelectionTimeoutMS=int(os.getenv("MONGO_CONNECTION_TIMEOUT", 10000)),
                ssl=True,
                ssl_cert_reqs=ssl.CERT_NONE,  # Disable certificate validation
                retryWrites=True,
                maxPoolSize=1  # Reduce connection pool for Docker
            )
        else:
            print("⚠️  No MongoDB configuration found (neither MONGO_HOST nor MONGODB_URL)")
            mongo_client = None
    else:
        # Using local MongoDB
        mongo_client = MongoClient(
            MONGO_DB["HOST"], 
            MONGO_DB["PORT"],
            serverSelectionTimeoutMS=int(os.getenv("MONGO_CONNECTION_TIMEOUT", 5000))
        )
    
    if mongo_client:
        MONGO_DATABASE = mongo_client[MONGO_DB["NAME"]]
    else:
        MONGO_DATABASE = None
        
except Exception as e:
    print(f"MongoDB connection warning: {e}")
    MONGO_DATABASE = None

# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-default-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "yes")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'Arryn_Back.infrastructure.api',  # ruta completa
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'Arryn_Back.infrastructure.middleware.performance.RateLimitMiddleware',
    'Arryn_Back.infrastructure.middleware.performance.ResponseCacheMiddleware', 
    'Arryn_Back.infrastructure.middleware.performance.RequestLoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "http://127.0.0.1:5173").split(",")



ROOT_URLCONF = 'Arryn_Back.infrastructure.config.urls'




TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Arryn_Back.infrastructure.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'api.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración para manejo de concurrencia alta
CACHES = {
    'default': {
        'BACKEND': os.getenv("CACHE_BACKEND", 'django.core.cache.backends.locmem.LocMemCache'),
        'LOCATION': os.getenv("CACHE_LOCATION", 'arryn-cache'),
        'TIMEOUT': int(os.getenv("CACHE_TIMEOUT", 300)),  # 5 minutos por defecto
        'OPTIONS': {
            'MAX_ENTRIES': int(os.getenv("CACHE_MAX_ENTRIES", 1000)),
        }
    }
}

# Always use locmem cache if Redis is configured but not available
cache_backend = os.getenv("CACHE_BACKEND", 'django.core.cache.backends.locmem.LocMemCache')
if 'redis' in cache_backend.lower():
    # Override Redis with LocMem for production when Redis is not available
    CACHES['default']['BACKEND'] = 'django.core.cache.backends.locmem.LocMemCache'
    CACHES['default']['LOCATION'] = 'arryn-cache'

# Session configuration para alta concurrencia
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Database connection configuration para SQLite
# (SQLite no soporta connection pooling como PostgreSQL)

# Configuración de logging para monitoreo
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': os.getenv("LOG_LEVEL", "INFO"),
            'class': 'logging.FileHandler',
            'filename': os.getenv("LOG_FILE", "django.log"),
            'formatter': 'verbose',
        },
        'console': {
            'level': os.getenv("LOG_LEVEL", "INFO"),
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': os.getenv("LOG_LEVEL", "INFO"),
            'propagate': True,
        },
        'arryn': {
            'handlers': ['file', 'console'],
            'level': os.getenv("LOG_LEVEL", "INFO"),
            'propagate': True,
        },
    },
}
