name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
        "sudo rm -rf /opt/arryn-backend && \
         sudo mkdir -p /opt/arryn-backend && \
         sudo chown ec2-user:ec2-user /opt/arryn-backend && \
         cd /opt/arryn-backend && \
         git clone https://github.com/ARRYN-PI2/pi2-backend.git . && \
         git checkout main"
         
    - name: Create Docker files
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
        "cd /opt/arryn-backend && \
         echo 'MONGODB_URL=${{ secrets.MONGODB_URL }}' > .env && \
         echo 'SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> .env && \
         echo 'DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}' >> .env"
         
    - name: Create docker-compose.yml
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
        "cd /opt/arryn-backend && \
         cat > docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          backend:
            build: .
            ports:
              - '8000:8000'
            env_file:
              - .env
            restart: unless-stopped
        EOF"
        
    - name: Create Dockerfile
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
        "cd /opt/arryn-backend && \
         cat > Dockerfile << 'EOF'
        FROM python:3.9-slim
        WORKDIR /app
        RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        RUN mkdir -p /app/static
        RUN python manage.py collectstatic --noinput || true
        EXPOSE 8000
        CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]
        EOF"
        
    - name: Deploy with Docker
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} \
        "cd /opt/arryn-backend && \
         docker-compose down || true && \
         docker-compose up -d --build"
         
    - name: Health Check
      run: |
        sleep 25
        curl -f http://${{ secrets.EC2_HOST }}:8000/ || echo "Health check failed, but deployment completed"